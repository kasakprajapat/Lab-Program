//optimal merge pattern
#include <iostream>
#include <vector>
#include <queue>

using namespace std;

// Function to calculate the minimum computation cost for optimal merging
int optimalMergePattern(vector<int> files) {
    // Create a min-heap (priority queue) and add all file sizes to it
    priority_queue<int, vector<int>, greater<int>> minHeap;
    for (int file : files) {
        minHeap.push(file);
    }

    // Initialize total cost
    int totalCost = 0;

    // Continue until there is only one file left in the heap
    while (minHeap.size() > 1) {
        // Extract the two smallest files
        int first = minHeap.top();
        minHeap.pop();
        int second = minHeap.top();
        minHeap.pop();

        // Merge the two files and add the cost
        int mergedFile = first + second;
        totalCost += mergedFile;

        // Add the merged file back to the heap
        minHeap.push(mergedFile);
    }

    return totalCost;
}

int main() {
    int n;
    cout << "Enter the number of files: ";
    cin >> n;

    vector<int> files(n);
    cout << "Enter the sizes of the files:\n";
    for (int i = 0; i < n; ++i) {
        cin >> files[i];
    }

    int cost = optimalMergePattern(files);
    cout << "Minimum computation cost for optimal merging: " << cost << endl;

    return 0;
}
